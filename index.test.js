const polish = require('./index')


describe('Index', () => {
  const arr = [
    "\nAATAAAAACATTTGGCACCCACCTATGATTTAATTTTTAGA\n((((***+))%%%++)(%%%%).1***-+*''))**55CCF>>",
    "\nGATTTAATTTTTTAGAAATTTAGAAACATTGAAATATCAA\n((((***+))%%%++)(%%%%).1***-+*''))**55CCF>>",
    "\nGAAATATCAAAGTGAAGTAGCCCAAGTTAG\n((((***+))%%%++)(%%%%).1***-+*''))**55CCF>>",
    "\nGAAGTAGCCCAAGTTAGGTTGAAGTCGG\n((((***+))%%%++)(%%%%).1***-+*''))**55CCF>>",
  ]
  test('should parse an array of strings', () => {
    const res = [ [ 'A', null, null, null, 'A' ],
    [ 'A', null, null, null, 'A' ],
    [ 'T', null, null, null, 'T' ],
    [ 'A', null, null, null, 'A' ],
    [ 'A', null, null, null, 'A' ],
    [ 'A', null, null, null, 'A' ],
    [ 'A', null, null, null, 'A' ],
    [ 'A', null, null, null, 'A' ],
    [ 'C', null, null, null, 'C' ],
    [ 'A', null, null, null, 'A' ],
    [ 'T', null, null, null, 'T' ],
    [ 'T', null, null, null, 'T' ],
    [ 'T', null, null, null, 'T' ],
    [ 'G', null, null, null, 'G' ],
    [ 'G', null, null, null, 'G' ],
    [ 'C', null, null, null, 'C' ],
    [ 'A', null, null, null, 'A' ],
    [ 'C', null, null, null, 'C' ],
    [ 'C', null, null, null, 'C' ],
    [ 'C', null, null, null, 'C' ],
    [ 'A', null, null, null, 'A' ],
    [ 'C', null, null, null, 'C' ],
    [ 'C', null, null, null, 'C' ],
    [ 'T', null, null, null, 'T' ],
    [ 'A', null, null, null, 'A' ],
    [ 'T', null, null, null, 'T' ],
    [ 'G', 'G', null, null, 'G' ],
    [ 'A', 'A', null, null, 'A' ],
    [ 'T', 'T', null, null, 'T' ],
    [ 'T', 'T', null, null, 'T' ],
    [ 'T', 'T', null, null, 'T' ],
    [ 'A', 'A', null, null, 'A' ],
    [ 'A', 'A', null, null, 'A' ],
    [ 'T', 'T', null, null, 'T' ],
    [ 'T', 'T', null, null, 'T' ],
    [ 'T', 'T', null, null, 'T' ],
    [ 'T', 'T', null, null, 'T' ],
    [ 'T', 'T', null, null, 'T' ],
    [ null, 'T', null, null, 'T' ],
    [ 'A', 'A', null, null, 'A' ],
    [ 'G', 'G', null, null, 'G' ],
    [ 'A', 'A', null, null, 'A' ],
    [ null, 'A', null, null, 'A' ],
    [ null, 'A', null, null, 'A' ],
    [ null, 'T', null, null, 'T' ],
    [ null, 'T', null, null, 'T' ],
    [ null, 'T', null, null, 'T' ],
    [ null, 'A', null, null, 'A' ],
    [ null, 'G', null, null, 'G' ],
    [ null, 'A', null, null, 'A' ],
    [ null, 'A', null, null, 'A' ],
    [ null, 'A', null, null, 'A' ],
    [ null, 'C', null, null, 'C' ],
    [ null, 'A', null, null, 'A' ],
    [ null, 'T', null, null, 'T' ],
    [ null, 'T', null, null, 'T' ],
    [ null, 'G', 'G', null, 'G' ],
    [ null, 'A', 'A', null, 'A' ],
    [ null, 'A', 'A', null, 'A' ],
    [ null, 'A', 'A', null, 'A' ],
    [ null, 'T', 'T', null, 'T' ],
    [ null, 'A', 'A', null, 'A' ],
    [ null, 'T', 'T', null, 'T' ],
    [ null, 'C', 'C', null, 'C' ],
    [ null, 'A', 'A', null, 'A' ],
    [ null, 'A', 'A', null, 'A' ],
    [ null, null, 'A', null, 'A' ],
    [ null, null, 'G', null, 'G' ],
    [ null, null, 'T', null, 'T' ],
    [ null, null, 'G', 'G', 'G' ],
    [ null, null, 'A', 'A', 'A' ],
    [ null, null, 'A', 'A', 'A' ],
    [ null, null, 'G', 'G', 'G' ],
    [ null, null, 'T', 'T', 'T' ],
    [ null, null, 'A', 'A', 'A' ],
    [ null, null, 'G', 'G', 'G' ],
    [ null, null, 'C', 'C', 'C' ],
    [ null, null, 'C', 'C', 'C' ],
    [ null, null, 'C', 'C', 'C' ],
    [ null, null, 'A', 'A', 'A' ],
    [ null, null, 'A', 'A', 'A' ],
    [ null, null, 'G', 'G', 'G' ],
    [ null, null, 'T', 'T', 'T' ],
    [ null, null, 'T', 'T', 'T' ],
    [ null, null, 'A', 'A', 'A' ],
    [ null, null, 'G', 'G', 'G' ],
    [ null, null, null, 'G', 'G' ],
    [ null, null, null, 'T', 'T' ],
    [ null, null, null, 'T', 'T' ],
    [ null, null, null, 'G', 'G' ],
    [ null, null, null, 'A', 'A' ],
    [ null, null, null, 'A', 'A' ],
    [ null, null, null, 'G', 'G' ],
    [ null, null, null, 'T', 'T' ],
    [ null, null, null, 'C', 'C' ],
    [ null, null, null, 'G', 'G' ],
    [ null, null, null, 'G', 'G' ] ]

    expect(polish(arr, { minQuality: 2, searchLength: 7 })).toEqual(res)
  })
  test('should allow limit to step2', () => {
    const res = [ [ [ 'A', '(' ],
    [ 'A', '(' ],
    [ 'T', '(' ],
    [ 'A', '(' ],
    [ 'A', '*' ],
    [ 'A', '*' ],
    [ 'A', '*' ],
    [ 'A', '+' ],
    [ 'C', ')' ],
    [ 'A', ')' ],
    [ 'T', '%' ],
    [ 'T', '%' ],
    [ 'T', '%' ],
    [ 'G', '+' ],
    [ 'G', '+' ],
    [ 'C', ')' ],
    [ 'A', '(' ],
    [ 'C', '%' ],
    [ 'C', '%' ],
    [ 'C', '%' ],
    [ 'A', '%' ],
    [ 'C', ')' ],
    [ 'C', '.' ],
    [ 'T', '1' ],
    [ 'A', '*' ],
    [ 'T', '*' ],
    [ 'G', '*' ],
    [ 'A', '-' ],
    [ 'T', '+' ],
    [ 'T', '*' ],
    [ 'T', '\'' ],
    [ 'A', '\'' ],
    [ 'A', ')' ],
    [ 'T', ')' ],
    [ 'T', '*' ],
    [ 'T', '*' ],
    [ 'T', '5' ],
    [ 'T', '5' ],
    [ 'A', 'C' ],
    [ 'G', 'C' ],
    [ 'A', 'F' ] ],
  [ [ 'G', '(' ],
    [ 'A', '(' ],
    [ 'T', '(' ],
    [ 'T', '(' ],
    [ 'T', '*' ],
    [ 'A', '*' ],
    [ 'A', '*' ],
    [ 'T', '+' ],
    [ 'T', ')' ],
    [ 'T', ')' ],
    [ 'T', '%' ],
    [ 'T', '%' ],
    [ 'T', '%' ],
    [ 'A', '+' ],
    [ 'G', '+' ],
    [ 'A', ')' ],
    [ 'A', '(' ],
    [ 'A', '%' ],
    [ 'T', '%' ],
    [ 'T', '%' ],
    [ 'T', '%' ],
    [ 'A', ')' ],
    [ 'G', '.' ],
    [ 'A', '1' ],
    [ 'A', '*' ],
    [ 'A', '*' ],
    [ 'C', '*' ],
    [ 'A', '-' ],
    [ 'T', '+' ],
    [ 'T', '*' ],
    [ 'G', '\'' ],
    [ 'A', '\'' ],
    [ 'A', ')' ],
    [ 'A', ')' ],
    [ 'T', '*' ],
    [ 'A', '*' ],
    [ 'T', '5' ],
    [ 'C', '5' ],
    [ 'A', 'C' ],
    [ 'A', 'C' ] ],
  [ [ 'G', '(' ],
    [ 'A', '(' ],
    [ 'A', '(' ],
    [ 'A', '(' ],
    [ 'T', '*' ],
    [ 'A', '*' ],
    [ 'T', '*' ],
    [ 'C', '+' ],
    [ 'A', ')' ],
    [ 'A', ')' ],
    [ 'A', '%' ],
    [ 'G', '%' ],
    [ 'T', '%' ],
    [ 'G', '+' ],
    [ 'A', '+' ],
    [ 'A', ')' ],
    [ 'G', '(' ],
    [ 'T', '%' ],
    [ 'A', '%' ],
    [ 'G', '%' ],
    [ 'C', '%' ],
    [ 'C', ')' ],
    [ 'C', '.' ],
    [ 'A', '1' ],
    [ 'A', '*' ],
    [ 'G', '*' ],
    [ 'T', '*' ],
    [ 'T', '-' ],
    [ 'A', '+' ],
    [ 'G', '*' ] ],
  [ [ 'G', '(' ],
    [ 'A', '(' ],
    [ 'A', '(' ],
    [ 'G', '(' ],
    [ 'T', '*' ],
    [ 'A', '*' ],
    [ 'G', '*' ],
    [ 'C', '+' ],
    [ 'C', ')' ],
    [ 'C', ')' ],
    [ 'A', '%' ],
    [ 'A', '%' ],
    [ 'G', '%' ],
    [ 'T', '+' ],
    [ 'T', '+' ],
    [ 'A', ')' ],
    [ 'G', '(' ],
    [ 'G', '%' ],
    [ 'T', '%' ],
    [ 'T', '%' ],
    [ 'G', '%' ],
    [ 'A', ')' ],
    [ 'A', '.' ],
    [ 'G', '1' ],
    [ 'T', '*' ],
    [ 'C', '*' ],
    [ 'G', '*' ],
    [ 'G', '-' ] ] ]
    expect(polish(arr, {}, 1)).toEqual(res)
  })
})